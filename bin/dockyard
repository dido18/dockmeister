#!/usr/bin/env ruby
$:.unshift(File.dirname('../lib'))

require 'lib/dockyard'

DOCKER_COMPOSE_CMD = 'docker-compose --file ./docker-compose.yml'

command = ARGV.first

case command
when 'compose'
  composed = Dockyard::Composer.new('.').compose

  File.open('docker-compose.yml', 'w') { |f| f.write(composed.to_yaml) }
when 'build'
  Dockyard::ScriptRunner.new('.').pre_build!

  unless Kernel.system("#{DOCKER_COMPOSE_CMD} build")
    puts 'Failed to build the Docker containers.'
    exit 1
  end

  Dockyard::ScriptRunner.new('.').post_build!
when 'up'
  Kernel.system("#{DOCKER_COMPOSE_CMD} up")
else
  puts <<-eos
    USAGE
      dockyard [COMMAND]

    COMMANDS:

      - compose:  Prepares a composition of each configured services' "docker-compose.yml" file into a single `docker-compose.yml` file.

      - build:    Runs pre and post build scripts for every service and builds the docker containers using "docker-compose build".
                  Build scripts are all scripts starting with "pre" and "post" in a services' "scripts" directory.

      - up:       Starts the containers using "docker-compose up"
    eos
end
